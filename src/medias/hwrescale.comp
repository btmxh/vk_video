#version 450

#extension GL_EXT_shader_image_load_formatted : require
#extension GL_EXT_debug_printf : enable

// this file handles conversion from RGBA32F (format used in internal processing)
// to YUV formats of output frames
layout(local_size_x = 8, local_size_y = 8) in;

struct ColorFormat {
    int nb_comps, nb_planes, nb_y_per_block;
    ivec2 log2_chroma;
    ivec4 plane;
    ivec4 offset;
};

const ColorFormat format = {
        COLOR_FORMAT
    };

const mat4 rgb2yuv_mat = mat4(
        0.257, 0.439, -0.148, 0.0,
        0.504, -0.368, -0.291, 0.0,
        0.098, -0.071, 0.439, 0.0,
        0.0625, 0.500, 0.500, 1.0
    );

vec4 rgb2yuv(vec4 rgba) {
    vec4 yuva = vec4(0.0);
    yuva.x = rgba.r * 0.299 + rgba.g * 0.587 + rgba.b * 0.114;
    yuva.y = rgba.r * -0.169 + rgba.g * -0.331 + rgba.b * 0.5 + 0.5;
    yuva.z = rgba.r * 0.5 + rgba.g * -0.419 + rgba.b * -0.081 + 0.5;
    yuva.w = 1.0;
    return yuva;
}

layout(rgba32f, set = 0, binding = 4) readonly uniform image2D inp;

layout(set = 0, binding = 0) writeonly uniform image2D images_0;
layout(set = 0, binding = 1) writeonly uniform image2D images_1;
layout(set = 0, binding = 2) writeonly uniform image2D images_2;
layout(set = 0, binding = 3) writeonly uniform image2D images_3;

layout(push_constant, std430) uniform Uniforms {
    ivec2 dimensions;
};

void write(int plane, ivec2 pos, vec4 color) {
    if (any(greaterThanEqual(pos, dimensions))) return;
    switch (plane) {
        case 0:
        imageStore(images_0, pos, color);
        break;
        case 1:
        imageStore(images_1, pos, color);
        break;
        case 2:
        imageStore(images_2, pos, color);
        break;
        case 3:
        imageStore(images_3, pos, color);
        break;
    }
}

void main() {
    ivec2 pos = ivec2(gl_GlobalInvocationID);
    ivec2 chroma_size = ivec2(1) << format.log2_chroma;

    ivec2 y_pos = pos * chroma_size;
    ivec2 win_size = min(chroma_size, dimensions - y_pos);

    vec4 yuv[2][2];
    float coeff = 1.0 / float(win_size.x * win_size.y);
    vec3 avg = vec3(0.0);
    for (int x = 0; x < win_size.x; ++x) {
        for (int y = 0; y < win_size.y; ++y) {
            yuv[x][y] = rgb2yuv(imageLoad(inp, y_pos + ivec2(x, y)));
            if (format.nb_comps >= 3)
                avg += yuv[x][y].gba * coeff;
        }
    }

    for (int plane = 0; plane < format.nb_planes; ++plane) {
        if (plane == format.plane[0]) {
            for (int y = 0; y < win_size.y; ++y) {
                for (int x = 0; x < win_size.x; x += format.nb_y_per_block) {
                    vec4 color = vec4(1.0);
                    // Y component
                    for (int dx = 0; dx < format.nb_y_per_block; ++dx) {
                        int off = format.offset[0] + dx * 4 / format.nb_y_per_block;
                        color[off] = yuv[x + dx][y].r;
                    }

                    // UVA components
                    for (int i = 1; i < format.nb_comps; ++i) {
                        if (plane == format.plane[i]) {
                            color[format.offset[i]] = avg[i - 1];
                        }
                    }

                    write(plane, y_pos + ivec2(x, y), color);
                }
            }
        } else {
            vec4 color = vec4(1.0);
            // UVA components
            for (int i = 1; i < format.nb_comps; ++i) {
                if (plane == format.plane[i]) {
                    color[format.offset[i]] = avg[i - 1];
                }
            }
            write(plane, pos, color);
        }
    }
}
